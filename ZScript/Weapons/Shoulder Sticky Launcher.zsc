// Shoulder-mounted Stickybomb Launcher
// It's on your shoulder, it's a stickybomb launcher.
// Kind of useless as of now (12/31/24 @ 7:22 AM) but... speeding it up might help
class GSW_ShoulderStickyLauncher : CustomInventory replaces RocketLauncher
{
	const STICKYLAYER = -100;
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		if (!other || !other.player)
		{
			return;
		}
		let psp = other.player.FindPSprite(STICKYLAYER);
		if (!psp)
		{
			psp = other.player.GetPSprite(STICKYLAYER);
			psp.caller = self;
			psp.bAddBob = false;
			psp.bAddWeapon = false;
			psp.bPlayerTranslated = true;
			psp.SetState(ResolveState("ReadySticky"));
		}
	}
	override bool TryPickup(in out Actor toucher)
	{
		toucher.A_GiveInventory("GSW_StickyAmmo", 2);
		return super.TryPickup(toucher);
	}
	override void Travelled()
	{
		super.Travelled();
		AttachToOwner(owner); // very dubious fix, i will not be surprised if something breaks later
	}
	Default
	{
		+INVENTORY.ALWAYSPICKUP // so you can get sticky ammo out of it
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.AUTOACTIVATE //Use is called automatically
		Inventory.PickupMessage "$GOTSTICKYLAUNCHER";
	}
	States 
	{
		Spawn:
			STKI Z -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				// We're passing 'true' to the last argument, so
				// that the layer doesn't get overridden if for
				// some reason the item is used again:
				A_Overlay(STICKYLAYER, "ReadySticky", true);
			}
			fail;
		ReadySticky:
			TNT1 A 1
			{
				// Check if +user2 is pressed:
				if (player.health > 0 && player.cmd.buttons & BT_USER2 && (invoker.owner.CountInv("GSW_StickyAmmo") > 0 || (sv_infiniteammo || (invoker.owner.FindInventory ('PowerInfiniteAmmo', true) != null))))
				{
					// move to DoKick if so:
					return ResolveState("DoSticky");
				}
				// Otherwise loop this layer
				return ResolveState(null);
			}
			loop;
		DoSticky:
			STKI A 1 Offset(-377, 171);
			STKI A 1 Offset(-374, 131); // B
			STKI A 1 Offset(-371, 91); // C
			STKI A 1 Offset(-368, 71); // D
			STKI A 1 Offset(-365, 51); // E
			STKI A 2 Offset(-350, 13); // F
			Goto ReFireSticky;
		HoldReFireSticky:
			STKI A 12 Offset(-350, 13); // F
		ReFireSticky:
			STKI A 2 Offset(-350, 13) { // F
				if (invoker.owner.CountInv("GSW_StickyAmmo") > 0 || (sv_infiniteammo || (invoker.owner.FindInventory ('PowerInfiniteAmmo', true) != null)))
				{
					A_Overlay(STICKYLAYER - 1, "FlashSticky");
					A_OverlayOffset(STICKYLAYER - 1, -20, WEAPONTOP);
				}
			}
			STKI A 3 Offset(-368, 5) { // G
				if (invoker.owner.CountInv("GSW_StickyAmmo") > 0 || (sv_infiniteammo || (invoker.owner.FindInventory ('PowerInfiniteAmmo', true) != null)))
				{
					invoker.owner.TakeInventory("GSW_StickyAmmo", 1, true, true);
					A_FireProjectile("GSW_ShoulderSticky", -3.5, false, -20, 7, FPF_TRANSFERTRANSLATION);
					A_StartSound("weapons/stickyshot");
					return ResolveState(null);
				}
				else
				{
					return ResolveState("FinishSticky");
				}
			}
			STKI A 0
			{
				if (player.cmd.buttons & BT_USER2 && player.oldbuttons & BT_USER2) // do an ammo check later
				{
					return ResolveState("HoldReFireSticky");
				}
				return ResolveState(null);
			}
		FinishSticky:
			STKI A 1 Offset(-365, 51); // E
			STKI A 1 Offset(-368, 71); // D
			STKI A 1 Offset(-371, 91); // C
			STKI A 1 Offset(-374, 131); // B
			STKI A 1 Offset(-377, 171); // A
			TNT1 A 6; // to prevent abuse
			Goto ReadySticky; //Note that we go back to ready from here
		FlashSticky:
			STKF ABCCDD 1;
			Stop;
	}
}
class GSW_ShoulderSticky : Actor
{
	int user_missiletime; //Timer for the missile to explode or drop.
	Default
	{
		Projectile;
		Radius 4;
		Height 4;
		Speed 35;
		DamageFunction (15);
		Gravity 0.5;
		-NOGRAVITY
		+HITTRACER //To allow the missile to stick on an actor
		Obituary "$KILLSTICKYLAUNCHER";
	}
	States
	{
		Spawn:
			STKP A 1 Bright A_SpawnItemEx("GSW_StickyTrail", flags: SXF_TRANSFERTRANSLATION);
			Loop;
		Crash:
		Death:
			TNT1 A 0 {bNOGRAVITY = true;}
			STKP A 1 BRIGHT {user_missiletime += 1;}
			STKP A 0 A_JumpIf(user_missiletime >= 20,"CrashDeath.LowTime");
			Loop;
		CrashDeath.LowTime:
			STKP B 0 A_PlaySound("weapons/stickybeep");
			STKP B 1 BRIGHT {user_missiletime += 1;}
			STKP B 0 A_JumpIf(user_missiletime >= 40,"Explode");
			STKP C 1 BRIGHT {user_missiletime += 1;}
			STKP C 0 A_JumpIf(user_missiletime >= 40,"Explode");
			STKP D 1 BRIGHT {user_missiletime += 1;}
			STKP D 0 A_JumpIf(user_missiletime >= 40,"Explode");
			Loop;
		XDeath:
			TNT1 A 0 {
				A_Stop();
				bSOLID = true;
			}
		StickOnEnemy:
			STKP A 0 {user_missiletime += 1;}
			STKP A 0 A_JumpIf(user_missiletime >= 20,"StickOnEnemy.LowTime");
			STKP A 0 A_JumpIfHealthLower(1, "DropDown", AAPTR_TRACER);
			STKP A 1 BRIGHT A_Warp(AAPTR_TRACER, 0, 0, 20, 0, WARPF_NOCHECKPOSITION);
			Loop;
		StickOnEnemy.LowTime:
			STKP B 0 {user_missiletime += 1;}
			STKP B 0 A_JumpIf(user_missiletime >= 40,"Explode");
			STKP B 0 A_JumpIfHealthLower(1, "DropDown", AAPTR_TRACER);
			STKP B 0 A_PlaySound("weapons/stickybeep");
			STKP B 1 BRIGHT A_Warp(AAPTR_TRACER, 0, 0, 20, 0, WARPF_NOCHECKPOSITION);
			STKP C 0 {user_missiletime += 1;}
			STKP C 0 A_JumpIf(user_missiletime >= 40,"Explode");
			STKP C 0 A_JumpIfHealthLower(1, "DropDown", AAPTR_TRACER);
			STKP C 1 BRIGHT A_Warp(AAPTR_TRACER, 0, 0, 20, 0, WARPF_NOCHECKPOSITION);
			STKP D 0 {user_missiletime += 1;}
			STKP D 0 A_JumpIf(user_missiletime >= 40,"Explode");
			STKP D 0 A_JumpIfHealthLower(1, "DropDown", AAPTR_TRACER);
			STKP D 1 BRIGHT A_Warp(AAPTR_TRACER, 0, 0, 20, 0, WARPF_NOCHECKPOSITION);
			Loop;
		DropDown:
			STKP A 0 A_Gravity;
			Goto Death;
		Explode:
			TNT1 A 0 {
				invoker.DamageType = "Rocket";
				A_Explode();
				A_StartSound("effects/explosion_small");
				A_SpawnItemEx("GSW_Explosion");
			}
			Stop;
	}
}
class GSW_StickyTrail : Actor
{
	Default
	{
		+NOTELEPORT
		+NOINTERACTION
		Renderstyle "Add";
		Scale 1;
		Alpha 0.75;
	}
	States
	{
		Spawn:
			STKP E 2 Bright A_Fadeout(0.075);
			Loop;
	}
}